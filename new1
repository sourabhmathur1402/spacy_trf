import pandas as pd
import re
import json
import numpy as np

# Load and clean data
file_path = 'your.xlsx'  # Adjust with the actual path of your CSV file
df = pd.read_excel(file_path)

df['Email Text'] = df['Email Text']
TRAIN_DATA = []
unmatched_entities = []  # List to store unmatched entities

for index, row in df.iterrows():
    text = row['Email Text']
    expected_entities = []  # List to store expected entities
    entities = []
    for label in ['OUTBOUND_SOURCE', 'OUTBOUND_DESTINATION', 'OUTBOUND_TRAVEL_DATE',
                  'INBOUND_TRAVEL_DATE', 'OUTBOUND_TRAVEL_TIME', 'INBOUND_TRAVEL_TIME',
                  'Travel Flight Number', 'Return Flight Name', 'Return Flight Number', 'Cabin class']:
        if pd.isnull(row[label]):  # Skip NaN values
            continue
        if label in ['INBOUND_DESTINATION', 'INBOUND_ORIGIN']:
            continue  # Skip 'Inbound_origin' and 'Inbound_destination'
        start_index = text.find(str(row[label]))
        if start_index != -1:
            end_index = start_index + len(str(row[label]))
            new_entity = (start_index, end_index, label.upper())
            if not any(start_idx <= start_index and end_idx >= end_index for start_idx, end_idx, _ in entities):
                entities.append(new_entity)
            expected_entities.append(new_entity)  # Add expected entity

    # Additional logic to handle dates with periods (e.g., 08.9.2024)
    date_matches = re.finditer(r'\b(\d{1,2}\.\d{1,2}\.\d{4})\b', text)
    for match in date_matches:
        date_start, date_end = match.span()
        entities.append((date_start, date_end, 'DATE'))
        expected_entities.append((date_start, date_end, 'DATE'))  # Add expected date entity

    # Additional logic to handle time
    time_matches = re.finditer(r'\b(\d{1,2}:\d{2})\b', text)
    for match in time_matches:
        time_start, time_end = match.span()
        entities.append((time_start, time_end, 'TIME'))
        expected_entities.append((time_start, time_end, 'TIME'))  # Add expected time entity

    # Compare extracted entities with expected entities
    if entities != expected_entities:
        unmatched_entities.append({"text": text, "expected_entities": expected_entities, "extracted_entities": entities})

    # Append the processed data to TRAIN_DATA
    TRAIN_DATA.append((text, {"entities": entities}))

# Save unmatched entities to a text file
output_file = "unmatched_entities.txt"
with open(output_file, "w") as f:
    for item in unmatched_entities:
        f.write(f"Text: {item['text']}\n")
        f.write("Expected Entities:\n")
        for entity in item['expected_entities']:
            f.write(f"{entity}\n")
        f.write("Extracted Entities:\n")
        for entity in item['extracted_entities']:
            f.write(f"{entity}\n")
        f.write("\n")

print("Unmatched entities saved to:", output_file)

# Save TRAIN_DATA to a JSON file
train_data_file = "train_data.json"
with open(train_data_file, "w") as f:
    json.dump(TRAIN_DATA, f, indent=4)

print("TRAIN_DATA saved to:", train_data_file)
